// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  email               String                @unique
  name                String
  password            String
  avatar              String?
  images              Image[]
  likes               Like[]
  messages            Message[]             @relation("messages")
  chats               Chat[]
  messageNotification MessageNotification[]
}

model MessageNotification {
  id      Int     @id @default(autoincrement())
  message Message @relation(fields: [id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId  Int
  userId  Int
}

model Image {
  id          Int      @id @default(autoincrement())
  user        User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  title       String
  description String
  createdAt   DateTime @default(now())
  lat         Float?
  lng         Float?
  userId      Int
  like        Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  userId    Int
  imageId   Int
}

model Message {
  id                  Int                  @id @default(autoincrement())
  text                String               @db.Text
  author              User                 @relation("messages", fields: [authorId], references: [id])
  chat                Chat                 @relation(fields: [chatId], references: [id], onUpdate: Cascade) 
  createdAt           DateTime             @default(now())
  authorId            Int
  chatId              Int
  status              String               @default("new") //delivered, read
  messageNotification MessageNotification?
}

model Chat {
  id            Int                   @id @default(autoincrement())
  members       User[]
  messages      Message[]
  notifications MessageNotification[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now()) @updatedAt
}
